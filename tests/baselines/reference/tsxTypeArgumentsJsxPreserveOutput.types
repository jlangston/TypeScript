=== tests/cases/conformance/jsx/foo.tsx ===
import React = require('react');
>React : typeof React

type TypeProps = { foo?: boolean; };
>TypeProps : TypeProps
>foo : boolean

interface InterfaceProps { foo?: boolean; }
>foo : boolean

function Foo<T>() {
>Foo : <T>() => any

    return null;
>null : null
}

<>
><>    <Foo<unknown> />    <Foo<string> />    <Foo<boolean> />    <Foo<object> />    <Foo<null> />    <Foo<any> />    <Foo<never> />    <Foo<undefined> />    <Foo<TypeProps> />    <Foo<InterfaceProps> /></> : JSX.Element

    <Foo<unknown> />
><Foo<unknown> /> : JSX.Element
>Foo : <T>() => any

    <Foo<string> />
><Foo<string> /> : JSX.Element
>Foo : <T>() => any

    <Foo<boolean> />
><Foo<boolean> /> : JSX.Element
>Foo : <T>() => any

    <Foo<object> />
><Foo<object> /> : JSX.Element
>Foo : <T>() => any

    <Foo<null> />
><Foo<null> /> : JSX.Element
>Foo : <T>() => any
>null : null

    <Foo<any> />
><Foo<any> /> : JSX.Element
>Foo : <T>() => any

    <Foo<never> />
><Foo<never> /> : JSX.Element
>Foo : <T>() => any

    <Foo<undefined> />
><Foo<undefined> /> : JSX.Element
>Foo : <T>() => any

    <Foo<TypeProps> />
><Foo<TypeProps> /> : JSX.Element
>Foo : <T>() => any

    <Foo<InterfaceProps> />
><Foo<InterfaceProps> /> : JSX.Element
>Foo : <T>() => any

</>
